<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>{ ... 데브로그 }</title>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>React 시작하기</title>
        <description>&lt;h2 id=&quot;react-설치하기&quot;&gt;React 설치하기&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$npx create-react-app {프로젝트명}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 명령어 한 줄로 아주 간단하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt; 프로젝트가 생성되었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;명령어를 통해 react 프로젝트가 생성된것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post12_react_basic/setup_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;라우터-설정하기&quot;&gt;라우터 설정하기&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$npm install --save react-router-dom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 명령어를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;react-router&lt;/code&gt;를 설치합니다.&lt;/p&gt;

&lt;p&gt;홈과 어바웃 2개의 페이지를 만들기 위해&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; 폴더아래 &lt;code class=&quot;highlighter-rouge&quot;&gt;views&lt;/code&gt;라는 폴더를 만들었습니다.&lt;/p&gt;

&lt;p&gt;그리고 그 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;home.js&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;about.js&lt;/code&gt; 2개의 컴포넌트를 생성해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/views/home.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react';

const Home = () =&amp;gt; {
  return (
      &amp;lt;div&amp;gt;
          hello world home
      &amp;lt;/div&amp;gt;
  )
};

export default Home;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로 2개의 컴포넌트를 생성합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/App.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react';
import { BrowserRouter as Router, Route, Switch} from &quot;react-router-dom&quot;;
import Home from './views/home';
import About from './views/about';

function App() {
  return (
    &amp;lt;Router&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;Switch&amp;gt;
                &amp;lt;Route exact path='/' component={Home} /&amp;gt;
                &amp;lt;Route path='/about' component={About} /&amp;gt;
            &amp;lt;/Switch&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/Router&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;App.js에서 Route를 import하고 path설정을 해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/about&lt;/code&gt; 를 들어가봅니다.&lt;/p&gt;

&lt;p&gt;간단하게 라우터 설정이 끝났습니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Sep 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-09-24/React%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%83%9D%EC%84%B1-%EB%B0%8F-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EC%97%B0%EA%B2%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-09-24/React%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%83%9D%EC%84%B1-%EB%B0%8F-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EC%97%B0%EA%B2%B0/</guid>
      </item>
    
      <item>
        <title>[DNS] Github 블로그에 커스텀 도메인을 연결해보자</title>
        <description>&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;본 글은 도메인 구입하는 과정은 생략합니다.&lt;/p&gt;

&lt;h2 id=&quot;도메인-구매&quot;&gt;도메인 구매&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;후이즈&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cafe24&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;가비아&lt;/code&gt; 등 국.내외 많은 업체들이 존재합니다. 적당하고 좋은 가격에 구입하시면 되는데 가능하면 믿을 수 있는 업체를 추천합니다.&lt;/p&gt;

&lt;p&gt;간혹 너무 작은 업체나 믿을 수 없는 업체는 도메인 서비스가 가끔 먹통되는 경우가 발생하곤 합니다.&lt;/p&gt;

&lt;h2 id=&quot;네임서버-연결&quot;&gt;네임서버 연결&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;결제한 도메인의 DNS설정으로 갑니다.&lt;br /&gt;
 &lt;img src=&quot;/images/post_11_blog_domain/setup_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;사진과 같이 A레코드 4개, CNAME으로 본인의 깃허브 URL을 입력합니다.&lt;/p&gt;

    &lt;p&gt;기존 2개를 입력하던것에서 4개로 입력하는것으로 변경되었습니다.
 A레코드 4개를 입력하면 자동으로 github에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;를 지원합니다.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://help.github.com/en/articles/setting-up-an-apex-domain#configuring-a-records-with-your-dns-provider&quot;&gt;Gubhub A레코드 설정문서 바로가기&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;github 블로그로 가서 설정을 변경해줍니다.
 ```
    &lt;ol&gt;
      &lt;li&gt;블로그&lt;/li&gt;
      &lt;li&gt;Settings&lt;/li&gt;
      &lt;li&gt;Custom Domain 에 본인의 구입한 도메인 주소 입력
 ```&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;1번&lt;/code&gt;에서 A레코드를 4개 입력하였다면 https 도 체크해줍니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설정이 끝났습니다.
 DNS설정은 업체마다 다르겠지만 최대 48시간까지 소요될 수 있습니다.
 저는 30분 이내로 처리되었어요.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/post_11_blog_domain/setup_2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 11 Sep 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-09-11/Guthub-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%97%B0%EA%B2%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-09-11/Guthub-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%97%B0%EA%B2%B0/</guid>
      </item>
    
      <item>
        <title>[GTM] Google Tag Manager를 이용한 마케팅 (심화)</title>
        <description>&lt;h2 id=&quot;gtm-tag-layer&quot;&gt;GTM tag Layer&lt;/h2&gt;
&lt;p&gt;모든 이벤트 로그 변수값을 기록하는 공간 (저장소)&lt;br /&gt;
페이지뷰 데이터레이어에 데이터 넣는 방법을 알아보자.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;
dataLayer.push();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;개발자콘솔에서-datalayer를-출력해보면-사진과-같이-보인다-이곳에-데이터를-추가해보자&quot;&gt;개발자콘솔에서 dataLayer를 출력해보면 사진과 같이 보인다. 이곳에 데이터를 추가해보자.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_11_gtm/blog_step_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dataLayer.push({ 'animal': 'chicken' });&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_11_gtm/blog_step_2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;가 보인다면 정상으로 처리되었다.&lt;/p&gt;

&lt;p&gt;다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;dataLayer&lt;/code&gt;를 출력해보면 방금 추가한 자료가 잘 들어있다.&lt;br /&gt;
GTM 미리보기 창에서도 확인이 가능하다.&lt;br /&gt;
&lt;img src=&quot;/images/post_11_gtm/blog_step_3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래는 javaScript를 이용해서 dataLayer에 데이터를 추가하는 간단한 예제이다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;
dataLayer.push({ animal: 'dof'}); // Page로딩시 animal 값 세팅
&amp;lt;/script&amp;gt;

&amp;lt;p onclick=&quot;dataLayer.push({ animal: 'chicken' });&quot;&amp;gt;TEST 버튼&amp;lt;/p&amp;gt;
// 버튼 클릭 시 value를 변경
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_11_gtm/blog_step_4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;이제-이렇게-저장된-datalayer의-변수를-gtm에서-확인해보자&quot;&gt;이제 이렇게 저장된 dataLayer의 변수를 GTM에서 확인해보자&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;변수 &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;사용자 정의 변수&lt;/code&gt; &amp;gt; 새로만들기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아까 &lt;code class=&quot;highlighter-rouge&quot;&gt;animal&lt;/code&gt;로 dataLayer에 담았으니 이름을 animal로 정한다.&lt;br /&gt;
&lt;img src=&quot;/images/post_11_gtm/blog_step_5.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
(버전1과 버전2의 차이)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_11_gtm/blog_step_6.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
설정이 완료되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_11_gtm/blog_step_7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 예제를 사용하여 특정 과정을 거치고나서 버튼을 눌렀는지, 그냥 눌렀는지를 분리하여 분석이 가능하다. &lt;br /&gt;
(와우!)&lt;/p&gt;

&lt;h4 id=&quot;특정-입력폼에-있는-값을-이벤트를-통해-gtm에-쌓아보자&quot;&gt;특정 입력폼에 있는 값을 이벤트를 통해 GTM에 쌓아보자.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;form id=&quot;letter-submit&quot;&amp;gt;
    &amp;lt;label for=&quot;user-mail&quot;&amp;gt;이메일&amp;lt;/label&amp;gt;
    &amp;lt;input type=&quot;email&quot; id=&quot;user-mail&quot;&amp;gt;
    &amp;lt;button type=&quot;submit&quot;&amp;gt;전송&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;form id=&quot;letter-submit&quot;&gt;
    &lt;label for=&quot;user-mail&quot;&gt;이메일&lt;/label&gt;
    &lt;input type=&quot;email&quot; id=&quot;user-mail&quot; /&gt;
    &lt;button type=&quot;submit&quot;&gt;전송&lt;/button&gt;
&lt;/form&gt;

&lt;p&gt;위의 소스를 실행해본다&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;GTM &amp;gt; 변수 &amp;gt; 기본 제공 변수 &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;양식&lt;/code&gt; 관련 변수를 활성화해준다. &lt;br /&gt;
 &lt;img src=&quot;/images/post_11_gtm/blog_step_8.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;트리거 생성&lt;br /&gt;
 &lt;img src=&quot;/images/post_11_gtm/blog_step_9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/post_11_gtm/blog_step_10.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
 폼 버튼을 눌러보면 사진과같이 Form이벤트가 발생한다.&lt;/p&gt;

    &lt;p&gt;사진과같이 이벤트가 발생하고 입력된 정보가 GTM으로 전달된다.   &lt;br /&gt;
 이제 이메일 정보만 분리해서 확인해보자&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자 정의 변수를 생성한다.&lt;/p&gt;

    &lt;p&gt;속성의 구분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;으로 구분한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/post_11_gtm/blog_step_11.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;태그 생성&lt;br /&gt;
 &lt;img src=&quot;/images/post_11_gtm/blog_step_12.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; (라벨 :  -  - 1q2w3e4razsxdcfv)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;/images/post_11_gtm/blog_step_13.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
 새로고침하여 정상적으로 출력되는지 확인한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;페이스북-픽셀을-사용해보자&quot;&gt;페이스북 픽셀을 사용해보자.&lt;/h4&gt;
&lt;p&gt;페이스북 비즈니스 관리자에서 픽셀 스크립트를 가져온다. (본 과정은 생략)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;태그 생성&lt;br /&gt;
&lt;img src=&quot;/images/post_11_gtm/blog_fb_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;픽셀이 동작하는지 확인해본다.&lt;br /&gt;
&lt;img src=&quot;/images/post_11_gtm/blog_fb_2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;페이스북-픽셀을-이용한-컨버젼-트레킹&quot;&gt;페이스북 픽셀을 이용한 컨버젼 트레킹&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;이전에 만든 픽셀 태그를 복사한다.&lt;br /&gt;
&lt;img src=&quot;/images/post_11_gtm/blog_fb_3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AddToCart&lt;/code&gt;의 이벤트를 설정한다.&lt;br /&gt;
&lt;img src=&quot;/images/post_11_gtm/blog_fb_4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;변수 생성&lt;br /&gt;
&lt;img src=&quot;/images/post_11_gtm/blog_fb_5.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/post_11_gtm/blog_fb_6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생성한 변수를 이용해 데이터를 수집해보자&lt;br /&gt;
&lt;img src=&quot;/images/post_11_gtm/blog_fb_7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;확인해본다. &lt;br /&gt;
&lt;img src=&quot;/images/post_11_gtm/blog_fb_8.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 10 Sep 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-09-10/GTM-%EC%8B%AC%ED%99%94/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-09-10/GTM-%EC%8B%AC%ED%99%94/</guid>
      </item>
    
      <item>
        <title>[GTM] Google Tag Manager를 이용한 마케팅 (기본)</title>
        <description>&lt;h2 id=&quot;gtm이란&quot;&gt;GTM이란?&lt;/h2&gt;
&lt;p&gt;사용자 액션 중심의 구글 마케팅 트래킹 툴&lt;/p&gt;

&lt;p&gt;태그매니저가 등록된 이후에는 개발자의 큰 도움없이도 이벤트추가, 트리거추가 등이 가능하다.&lt;br /&gt;
(웹에서 마우스클릭을 통해 작성)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;GTM구조&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; - Account (회사 단위)
     - Container (서비스 단위.. 웹, 안드로이드, 아이폰 등 분리해야함)
         - Tag (어떤 시점에 어떤 정보를 전달할지를 결정)
             - Trigger (어떤 `시점`을 결정)
             - Variable (특정 `조건`을 설정)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;용어 정리&lt;br /&gt;
 &lt;strong&gt;Trigger&lt;/strong&gt; : true, false을 판별하는 요소로 특정 조건에 Tags가 발송됨&lt;br /&gt;
 &lt;strong&gt;Data Layer&lt;/strong&gt; : GTM에 전달하려는 데이터 모음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GTM Flow&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1. GTM code snippet추가
 2. 변수와 트리거 생성
 3. 태그 생성
 4. 미리보기를 통해 정상동작 확인
 5. Deploy
 6. 데이터 수집
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;gtm-세팅하기&quot;&gt;GTM 세팅하기&lt;/h2&gt;
&lt;h4 id=&quot;page-view-수집&quot;&gt;Page View 수집&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;구글 애널리틱스 GA 추적값 생성 (관리 -&amp;gt; 추적정보 -&amp;gt; 추적코드)  &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_step_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GTM 변수 등록                                    &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_step_2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;태그 만들기                                     &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_step_3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;미리보기 새로고침 후에 블로그를 새로고침 한다.  &lt;br /&gt;
태그매니저 미리보기에 좀전에 설정한 태그를 볼 수 있다.  &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_step_4.png&quot; alt=&quot;image&quot; /&gt;  &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_step_5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;완료되었다면 오른쪽 상단&lt;code class=&quot;highlighter-rouge&quot;&gt;제출&lt;/code&gt;을 눌러서 실 사용자에게 Live해준다    &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_step_6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;완료!                                     &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_step_7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;click-event-수집&quot;&gt;Click Event 수집&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;변수 설정                                   &lt;br /&gt;
 변수 -&amp;gt; 기본제공변수 구성 -&amp;gt; 클릭에 대한 정보를 체크하여 화성화해준다.    &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_click_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;트리거 설정
 &lt;code class=&quot;highlighter-rouge&quot;&gt;링크만&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;태그에 대해서만 추적한다.
 &lt;code class=&quot;highlighter-rouge&quot;&gt;모든 요소&lt;/code&gt; : 모든 페이지 이동에 대하여 추적한다. (설정에 따라 모든 클릭 중 특정 클릭만 추적도 가능하다.)  &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_click_2.png&quot; alt=&quot;image&quot; /&gt;    &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_click_3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;새로고침하여 블로그에서 클릭 이벤트를 확인해본다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;image-click-추적-수집&quot;&gt;Image Click 추적 수집&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Click Element 설정으로 유니크한 값을 관리할 수 있다.           &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_image_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;유니크한 값으로는 id &amp;gt; class &amp;gt; selector 순으로 정한다.   &lt;br /&gt;
 이마저도 없는경우 어쩔 수 없이 url을 사용한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Click URL&lt;/code&gt;값으로 트리거에 등록한다.                 &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_image_2.png&quot; alt=&quot;image&quot; /&gt;      &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_image_3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;모든 클릭이 아닌 &lt;code class=&quot;highlighter-rouge&quot;&gt;일부 클릭&lt;/code&gt;을 선택 후 Path, Url등을 설정할 수 있다.        &lt;br /&gt;
 연산자를 여러개 지정하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;And&lt;/code&gt;조건으로 설정할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;태그 만들기&lt;br /&gt;
 &lt;strong&gt;참고로 트리거를 여러개 하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;OR&lt;/code&gt;조건으로 동작한다.&lt;/strong&gt;  &lt;br /&gt;
 좀전에 생성한 트리거를 선택한다.                   &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_image_4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;태그는 &lt;code class=&quot;highlighter-rouge&quot;&gt;이벤트&lt;/code&gt;로 설정한다.                   &lt;br /&gt;
 라벨에 저장될 데이터를 설정한다.                             &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_image_5.png&quot; alt=&quot;image&quot; /&gt;           &lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;비 상호작용 조회&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;로 설정하면 페이지 이동에 대해 단일 세션이 아니라는 의미이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;새로고침하여 결과를 확인한다.                              &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_image_6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;마지막으로 GA에서 이벤트가 잘 들어오는지도 확인해본다.&lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_result_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;visibility-상태-수집&quot;&gt;Visibility 상태 수집&lt;/h4&gt;
&lt;p&gt;화면에 해당 정보가 나왔을 때 (사용자가 스크롤을 해당 위치에서 멈췄을 때)를 추적하기 위한 이벤트
변수 &amp;gt; 기본제공변수 구성 &amp;gt; 공개상태를 설정해준다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;트리거 설정                        &lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_visibility_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;트리거 추가
 트리거 추가 &amp;gt; 트리거 구성을 &lt;code class=&quot;highlighter-rouge&quot;&gt;요소 공개 상태&lt;/code&gt;로 설정하고 이미지의 요소 selector을 붙여준다.    &lt;br /&gt;
 (크롬 개발자도구에서 해당 이미지 태그에서 우클릭 &amp;gt; Copy &amp;gt; Copy Selector 선택)&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;최소비율표시&lt;/code&gt; : 페이지에서 해당 이미지가 최소 몇% 보여졌을 때 트리거가 동작할 지 설정한다.
 &lt;code class=&quot;highlighter-rouge&quot;&gt;화면 표시 최소 시간&lt;/code&gt; : 해당 이미지가 화면에 최소 시간동안 보여졌을 때 추적&lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_visibility_2.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/post_10_gtm/setting_visibility_3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;virtual-page-view&quot;&gt;Virtual Page View&lt;/h4&gt;
&lt;p&gt;웹사이트에서 페이지의 이동이 없을때에도 페이지 이동으로 이벤트 처리하는 방법, 혹은 탭뷰에 사용한다.&lt;br /&gt;
(대표적인 예로 앵귤러로 개발한 페이지의 경우 url이 이동없음에도 페이지가 이동한다.)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;해당 버튼에 반응하는 트리거를 생성한다              &lt;br /&gt;
 본 예제에서는 a태그 추적을 위하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;링크만&lt;/code&gt;으로 설정한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/post_10_gtm/setting_virtual_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;태그 생성                                    &lt;br /&gt;
 재정의를 사용하여 클릭 시 새로운 입력값을 전달할 수 있다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/post_10_gtm/setting_virtual_2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;결과 확인. 클릭 시 Link Click이 발생한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/post_10_gtm/setting_virtual_3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;정리하며&quot;&gt;정리하며..&lt;/h2&gt;
&lt;p&gt;과거에 특정 이벤트마다/페이지마다 마케터의 요청에 따라 개발자가 GA이벤트를 설치했던 경험과는 달리 GTM을 사용하면 개발자는 &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BODY&lt;/code&gt;에 기본적인 태그만 심어주면 마케터가 필요한 이벤트나 PV에 대해 원하는 추적이 가능하다는점이 좋은 것 같다.&lt;/p&gt;

</description>
        <pubDate>Wed, 04 Sep 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-09-04/GTM-%EA%B8%B0%EB%B3%B8/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-09-04/GTM-%EA%B8%B0%EB%B3%B8/</guid>
      </item>
    
      <item>
        <title>JSConf Korea 2019</title>
        <description>&lt;h2 id=&quot;1-다마고치로-배우는-제너레이터&quot;&gt;1. 다마고치로 배우는 제너레이터&lt;/h2&gt;
&lt;p&gt;웹 프로젝트로 다마고치를 개발하면서 사용한 제너레이터에 대한 강연이었다.&lt;/p&gt;

&lt;h4 id=&quot;generator란&quot;&gt;Generator란?&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Generator&lt;/code&gt;객체는 &lt;code class=&quot;highlighter-rouge&quot;&gt;generator function&lt;/code&gt;으로부터 반환된 객체이다.&lt;br /&gt;
간단히 다시 작성해보면, javascript에서 function선언을 할 때&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;function* test() {}&lt;/code&gt; 과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 을 붙여주면 generator function이라는 함수를 선언할 수 있다. 그리고 이로부터 반환된 객체를 의미한다.&lt;/p&gt;

&lt;p&gt;예를 들어보면 아래 코드와 같다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function* generatorFunction() {
    yield 20;
}

const generator = generatorFunction();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;yeild--next&quot;&gt;yeild / next&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yeild&lt;/code&gt;는 generator함수에서 순서를 나타낸다. 일반 함수와는 다르게 &lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt;를 호출하기 전에는 yeild에서 일시정지한 상태로 기다린다. &lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt;를 호출 시 yeild에서 기다리다가 다음 yeild를 실행한다.&lt;/p&gt;

&lt;p&gt;일반 함수에서 callback을 기다리는 느낌과 비슷하다.&lt;/p&gt;

&lt;p&gt;위의 예제의 소스에서 next()를 사용해보자&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function* generatorFunction() {
    yield 20;
}

const generator = generatorFunction();
console.log(generator.next());

// 출력 : { value: 20, done: true }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 yeild가 2개 이상이라 다음 yeild가 또 있다면..&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function* generatorFunction() {
    yield 20;
    yield 30;
}

const generator = generatorFunction();
console.log(generator.next());

// 출력 : { value: 20, done: false }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이와같이 다음 yeild이 있으므로 done값은 false이다.&lt;/p&gt;

&lt;h2 id=&quot;2-dont-block-the-event-loop-매끄러운-경험을-위한-자바스크립트-비동기-처리&quot;&gt;2. Don’t block the event loop! 매끄러운 경험을 위한 자바스크립트 비동기 처리&lt;/h2&gt;
&lt;p&gt;코드를 좀 더 매끄럽게. 사용자에게 좀 더 부드럽게.&lt;br /&gt;
함수를 호출 할 때 Call Stack에서는 어떠한 일이 벌이질까?&lt;/p&gt;

&lt;h4 id=&quot;a-call-stack의-처리과정&quot;&gt;a. Call Stack의 처리과정&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function hello() {
    console.log('hello');
}

function helloPrint() {
    hello();
    console.log('print completed');
}

helloPrint();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 예제가 있다고 생각해보자.
스택에서는 어떤 일이 일어날까?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. main() 적치
2. helloPrint() 적치
3. hello() 적치
4. console.log('hello') 처리
5. console.log('hello') 완료
6. console.log('print completed') 처리
7. console.log('print completed') 완료
8. hello() 완료
9. helloPrint() 완료
10. main() 완료
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이와같은 순서로 Stack에서 처리가 이루어질것이다.&lt;/p&gt;

&lt;p&gt;Stack구조상 한개의 작업이 끝나야 다음 작업이 이루어지므로 위 1~10번 과정 중 하나라도 시간을 오래잡아먹는 잡업이 있다면 그 이후의 작업은 처리가 되지 못할것이다. 즉 웹이 죽는 현상이 발생할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;b-event-loop에-대해-알아보자&quot;&gt;b. Event loop에 대해 알아보자&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setTimeout(() =&amp;gt; {
    console.log('hello');
})

Promise.resolve().then(() =&amp;gt; {
    console.log('JSConfKorea!!');
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예제를 살펴보자.
&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;은 javascript에서 일정 시간 딜레이를 기다린 다음 실행하게 하는 함수이다. 위 예제에서는 시간을 지정하지 않았으므로 defalut값인 0이 들어간다.&lt;/p&gt;

&lt;p&gt;그리고 그 바로 아래는 간단한 메세지를 출력하는 함수이다.&lt;/p&gt;

&lt;p&gt;위의 예제의 실행결과를 예상해보자.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello
JSConfKorea!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;0초후 실행이니 바로 메세지를 출력하고 그 다음 JSConfKorea!!가 출력될거라 예상할 수 있다.&lt;br /&gt;
Call Stack에서는 어떤일이 일어나는지 확인해볼 필요가 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Call Stack에 setTimeout() 적치
2. Task에 hello 적치
3. Call Stack에 Promise.resolve().then() 적치
4. Microtasks에 JSConfKorea!! 적치
5. JSConfKorea!! 출력 
6. hello 출력
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;우리가 예상했던 출력순서와는 좀 다르다. 왜 그럴까?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Microtask&lt;/code&gt;는 새로운 Task의 개념으로 기존 Task에 영향을 받지 않고 Async로 실행되는 Task이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Microtask&lt;/code&gt;로 실행되는 함수는 대표적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise callback, MutationObserver, process.nextTck&lt;/code&gt;이 있다.&lt;/p&gt;

&lt;p&gt;아래의 JSConfKorea!!는 Promise로 실행되기 때문에 MicroTask로 실행되고, MicroTask는 Task보다 더 높은 실행 우선순위를 가진다. 따라서 hello보다 먼저 출력된다.  &lt;br /&gt;
그래서 위의 예제에서 출력순서가 뒤바뀌는것을 볼 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;정리하며&quot;&gt;정리하며..&lt;/h2&gt;
&lt;p&gt;여러 가지 세션이 있었지만 그중 두 가지 내용에 대해 정리해보았다. 2번으로 설명한 내용에는 Task, MicroTask를 주목하여 클라이언트의 최적화에 대해 뒷장에 설명하고있는데 해당 부분도 공부해서 더 좋은 서비스를 만들 수 있다면 좋을 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;https://www.slideshare.net/100003065728857/javascript-async-for-effortless-ux&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 03 Sep 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-09-03/JSConfKorea2019/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-09-03/JSConfKorea2019/</guid>
      </item>
    
      <item>
        <title>[Github] package registry 이용하기</title>
        <description>&lt;h2 id=&quot;package-registry&quot;&gt;package registry&lt;/h2&gt;
&lt;p&gt;2019년 5월 github에서 Package Registry를 공개했다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npmjs&lt;/code&gt;와 마찬가지로 github에서도 npm저장소를 제공한다는 의미이다.&lt;/p&gt;

&lt;p&gt;(포스팅을 작성하는 현재는 beta 버전이다). &lt;a href=&quot;https://github.com/features/package-registry&quot;&gt;자세히보기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Maven&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NuGet&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;RubyGems&lt;/code&gt;를 지원한다.&lt;/p&gt;

&lt;p&gt;본 포스팅에서는 npm기준으로 작성해보고자 한다.&lt;/p&gt;

&lt;h2 id=&quot;github-package-registry-장점&quot;&gt;github package registry 장점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;한 저장소에서 비공개/공개 package저장소를 이용할 수 있다.&lt;/li&gt;
  &lt;li&gt;하나의 권한으로 관리할 수 있다. (access token)&lt;/li&gt;
  &lt;li&gt;global을 통한 빠른 CDN다운로드 제공&lt;/li&gt;
  &lt;li&gt;다양한 언어를 하나의 깃헙 인증권한을 통해 권한 제어가 가능하다. (이건 좀 편한듯)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;깃헙은 이전에 비결제 사용자에게도 프라이빗 환경을 제공한다. package registry역시 무료로 이용가능하다는점이 npmjs와 가장 큰 차이일것같다.&lt;/p&gt;

&lt;p&gt;또한 깃헙에는 push에 대한 hook액션을 지원하는데, package에도 동일하게 적용 가능하다. 이것을 이용해 빌드, 배포자동화도 가능할 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_9_git_npm/package_main.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
[github - package 메인화면]&lt;/p&gt;

&lt;h2 id=&quot;package-registry에-등록하기&quot;&gt;package registry에 등록하기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/post_9_git_npm/npm_publish_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;package를 먼저 간단히 만든다.  &lt;a href=&quot;https://github.com/cjstk7168/hello-world-npm&quot;&gt;샘플 package 보기&lt;/a&gt;&lt;br /&gt;
 본 예제에서는 정~말 간단히 작성하였다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; const print = () =&amp;gt; {
     console.log('hello world!!');
 };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;생성하였다면 publish를 해주어야 한다.&lt;br /&gt;
 &lt;a href=&quot;https://github.com/features/package-registry&quot;&gt;github 자료 참고&lt;/a&gt;&lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm publish&lt;/code&gt;를 위해서는 저장소에 로그인을 하여야하는데,
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; npm login --registry=https://npm.pkg.github.com --scope=@${username}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;권한설정이 우선되어야한다.&lt;br /&gt;
 &lt;a href=&quot;https://help.github.com/en/articles/configuring-npm-for-use-with-github-package-registry&quot;&gt;github 관련자료&lt;/a&gt;
 &lt;a href=&quot;https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line&quot;&gt;access token 생성&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;위 링크를 참고하여 생성하였다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm login&lt;/code&gt;을 해준다.&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; npm login --registry=https://npm.pkg.github.com --scope=@${username}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Password는 위에서 생성한 access token을 입력해준다.&lt;/p&gt;

    &lt;p&gt;login이 되었다면 project내에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm publish&lt;/code&gt;하면 해당 git저장소로 간단히 올라간다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;package사용하기 &lt;a href=&quot;https://github.com/cjstk7168/call-github-npm-sample&quot;&gt;샘플 프로젝트&lt;/a&gt;&lt;br /&gt;
 그 이후에는 일반 npm저장소에 있는것과 마찬가지로 사용이 가능하다.
 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install @${username}/${package_name}&lt;/code&gt; 과같이 설치가 가능하다.&lt;/p&gt;

    &lt;p&gt;위 예제 프로젝트에서는 다음의 명령어로 설치하였다.&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; npm install --save @cjstk7168/hello-world-npm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;사용할 때는&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; const { print } = require('@cjstk7168/hello-world-npm');
 print();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;위와같이 간단하게 사용이 가능하다.&lt;/p&gt;

    &lt;p&gt;npm저장소는 개인이 사용하기에도 유료라서 아쉬웠는데, github를 이용하면 npm저장소를 무료로 이용가능해서 좋다는 생각이 든다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;결과
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $node index.js 
 hello world!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;reference&quot;&gt;reference&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;https://github.com/features/package-registry&lt;/li&gt;
  &lt;li&gt;https://www.44bits.io/ko/post/news–announcing-github-package-registry&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 21 Aug 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-08-21/github-package-registry/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-08-21/github-package-registry/</guid>
      </item>
    
      <item>
        <title>[AWS] 무중단 자동배포환경 구성하기</title>
        <description>&lt;h2 id=&quot;사전준비&quot;&gt;사전준비&lt;/h2&gt;
&lt;p&gt;우선 배포를 위한 프로젝트를 생성한다.&lt;br /&gt;
본 예제에서는 Express + Vue.js로 구성된 기본 프로젝트를 사용하기로 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2019-06-01/Express-Vue-개발환경-세팅하기/&quot;&gt;프로젝트 세팅방법&lt;/a&gt;
(프로젝트가 없다면 링크 참고)&lt;/p&gt;

&lt;h2 id=&quot;aws가입하기&quot;&gt;AWS가입하기&lt;/h2&gt;
&lt;p&gt;AWS는 이메일+암호+기본정보(이름 주소)를 입력 후 카드를 걸어두면 바로 사용이 가능하다.&lt;br /&gt;
필자는 AWS의 개인계정을 서비스에 사용하는 정도는 아니고 프리티어수준으로도 충분하다.&lt;br /&gt;
때문에 예제에서 모든 세팅은 프리티어 기준으로 기록할 예정이다.&lt;/p&gt;

&lt;h2 id=&quot;elastic-beanstalk-생성&quot;&gt;Elastic Beanstalk 생성&lt;/h2&gt;
&lt;p&gt;AWS 프리티어의 경우 Elastic Beanstalk(이하 EB)에 대한 요금은 별도로 부과하지 않는다. 다만 EB에 연결된 EC2에 대한 비용이 부과되는데, 학습을 위한 용도라면 무료한도 내에서 생성해야한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/ko/ec2/pricing/&quot;&gt;AWS EC2 비용 확인하기&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;필요한 내용만 적어보자면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows t2.micro 인스턴스를 월별 750시간 사용&lt;/code&gt;으로 설정하면 프리티어 한도 내에서 무료로 사용가능하다. (24시간 가동해도 한달 사용가능한 시간이다.)&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/post_8_eb/setup1.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
 [AWS -&amp;gt; Elastic Beanstalk 화면 접속하면 위와같은 화면을 볼 수 있다]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;시작하기&lt;/strong&gt; 버튼을 눌러서 새로운 프로젝트를 생성한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;img src=&quot;/images/post_8_eb/setup2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;프로젝트명&lt;/code&gt; : 적당한 이름을 적어준다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;플랫폼&lt;/code&gt; : 개발할 언어를 적어준다. 본 예제에서는 Node.js배포를 위하여 Node.js를 선택했다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;애플리케이션 코드&lt;/code&gt; : 바로 올려도 되지만 환경 구성 후 업로드도 가능하다. &lt;code class=&quot;highlighter-rouge&quot;&gt;샘플 어플리케이션&lt;/code&gt;을 선택하고 넘어간다.&lt;br /&gt;
&lt;img src=&quot;/images/post_8_eb/setup3.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
[위와같이 환경구성을 시작한다. 환경구성에는 5분정도 소요된다.]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생성된 환경을 보면 Elastic Beanstalk은 배포를 위한 서비스이기 때문에 실제로 EC2에 가보면 리눅스 서버가 생성되어있다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/post_8_eb/setup4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;환경구성이 완료되었다!
상단에 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;이라는 항목이 있다. 눌러보면 샘플 웹이 뜬다! (환호!)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;구성 &amp;gt; 인스턴트를 통해 원하는 형태의 EC2 인스턴스가 생성되었는지 확인해본다.&lt;br /&gt;
 &lt;em&gt;(프리티어이기때문에 민감하다)&lt;/em&gt;
 EC2 micro로 선택해서 로드밸런서를 지원하지 않는데, 다음에 사용할 기회가 있다면 다시 포스팅을 해보겠다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;업로드 및 배포&lt;/code&gt;를 눌러서 새로운 프로젝트를 업로드 할 수 있다.&lt;br /&gt;
 하지만, 우리의 최종목적은 &lt;code class=&quot;highlighter-rouge&quot;&gt;자동배포&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;img src=&quot;/images/post_8_eb/setup5.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
 Elastic Beanstalk 메인페이지로 오면 위와같이 생성된 프로젝트를 볼 수 있고
 왼쪽에 배포환경 구성세팅에 대한 설명이 있다. (친절하여라)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AWS EB CLI 설치&lt;/code&gt; 링크를 눌러보면 아주 자세히 설명되어있다. &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/eb-cli3-install.html&quot;&gt;바로가기&lt;/a&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git clone https://github.com/aws/aws-elastic-beanstalk-cli-setup.git
$./aws-elastic-beanstalk-cli-setup/scripts/bundled_installer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;위 두 줄로 배포환경이 모두 설치된다.&lt;br /&gt;
예전에는 설치하고 세팅할게 많았는데, 이제는 스크립트로 한 번에 편하게 설치하도록 지원해준다.&lt;/p&gt;

    &lt;p&gt;혹시 Mac OS에서 eb가 정상적으로 설치되지 않는다면? =&amp;gt; &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/eb-cli3-install-osx.html&quot;&gt;링크 참고&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eb init&lt;/code&gt;&lt;br /&gt;
 업로드할 프로젝트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;eb init&lt;/code&gt;을 실행하여 배포환경을 준비한다.
    &lt;ul&gt;
      &lt;li&gt;region선택 (필자는 당연히 서울리젼)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aws-access-id&lt;/code&gt;선택 (IAM 설정이 필요하다 - 다음 포스팅에서 다뤄본다)&lt;/li&gt;
      &lt;li&gt;여기까지 하면 기존에 생성된 프로젝트가 리스트에 있다. 해당 프로젝트 선택&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설정이 끝났다 배포를 해보자
 &lt;code class=&quot;highlighter-rouge&quot;&gt;eb deploy&lt;/code&gt;&lt;br /&gt;
 끝!? 끝!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;배포가 정상적으로 잘 되었는지 &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS console&lt;/code&gt; 에서 확인해본다.&lt;br /&gt;
&lt;img src=&quot;/images/post_8_eb/setup6.png&quot; alt=&quot;image&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;추가로-확인해보아얄-사항&quot;&gt;추가로 확인해보아얄 사항&lt;/h2&gt;
&lt;p&gt;이 리스트에 내용은 다음 포스팅에 추가하기로 한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;분산처리를 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;로그밸런서&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;배포권한을 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;IAM&lt;/code&gt;설정&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AWS -Route53&lt;/code&gt;을 이용한 도메인 연결&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 13 Aug 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-08-13/vuejs%EC%9E%90%EB%8F%99%EB%B0%B0%ED%8F%AC-aws/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-08-13/vuejs%EC%9E%90%EB%8F%99%EB%B0%B0%ED%8F%AC-aws/</guid>
      </item>
    
      <item>
        <title>TypeScript로 Express시작하기</title>
        <description>&lt;h2 id=&quot;typescript-설치&quot;&gt;TypeScript 설치&lt;/h2&gt;
&lt;p&gt;우선 &lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt;를 먼서 설치해준다.
본 예제에서는 서버용 &lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt;를 세팅하기위하여 프로젝트명을 &lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt;로 설정한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install express-generator -g
$ express api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그리고 기본적인 모듈 설치&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd api
$ npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 기본적인 express세팅은 끝이났다.
다음으로 TypeScript사용을 위한 세팅을 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# make package.json
$ npm init -y

# install save devDependencies
$ npm i -D typescript
+ typescript@3.5.3

# install @types
$ npm i -D @types/node @types/express
+ @types/express@4.0.37
+ @types/node@8.0.30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;빌드를 위한 TypeScript설정을 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# make tsconfig.json
$ npx tsc -init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로젝트를 시작할 때 TypeScript를 빌드 후 Node.js로 실행하는 스크립트를 편집한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# package.json
{
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;tsc &amp;amp;&amp;amp; node dist&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기까지 했으면 TypeScript사용을 위한 express세팅이 완료되었다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;를 통하여 정상적으로 동작하는지 확인해본다.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Aug 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-08-10/express-typescript%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-08-10/express-typescript%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid>
      </item>
    
      <item>
        <title>git을 한 번 사용해볼까..?</title>
        <description>&lt;h2 id=&quot;git-사용&quot;&gt;git 사용&lt;/h2&gt;
&lt;p&gt;나는 한 스타트업에 재직중인 &lt;code class=&quot;highlighter-rouge&quot;&gt;Backend&lt;/code&gt; 개발자이다. 경력이 만으로 5년이 넘어가고 6년차가 되었지만 부끄럽게도 git을 지금까지는 아주 기본적인 기능만 사용해왔었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;굳이 git을 써야해?&lt;/code&gt; 할 정도로 소스 버전관리/협업의 목적보다는 개발한 소스를 공유하는 정도로만 사용했다. 개발자가 많지 않았던터라 push 도중 &lt;code class=&quot;highlighter-rouge&quot;&gt;conflict&lt;/code&gt;경우도 거의 없었다.
그동안 &lt;code class=&quot;highlighter-rouge&quot;&gt;add, pull, push&lt;/code&gt;만 사용해왔던것같다.&lt;/p&gt;

&lt;p&gt;지금 회사에 와서야 git을 사용하면서 다른사람들에게는 너무나 쉽겠지만 나에겐 적응이 필요했던 git 사용기를 기록해볼까 한다.&lt;/p&gt;

&lt;h2 id=&quot;매일-아침-rebase받는-습관&quot;&gt;매일 아침 rebase받는 습관&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/2019-07-02/Github-merge-rebase/&quot;&gt;rebase가 뭔지는 여기에서&lt;/a&gt;&lt;br /&gt;
매일 아침 &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;에서 (혹은 회사에 따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;에서?) 매일아침 rebase를 받는다.
그 이유는 내가 작업하고있는 부분이 다른사람도 수정했을 경우가 있기 때문에. 이런경우 rebase받을 때 conflict가 생기는데 이 부분을 잘 merge해줘야 한다. 그러면 나중에 push할 때 충돌 없이 merge가 가능하다.&lt;/p&gt;

&lt;p&gt;처음에는 이걸 몰라서 conflict 상황에서 어떻게 해야할지 몰랐다.&lt;br /&gt;
&lt;del&gt;물론 지금도 &lt;code class=&quot;highlighter-rouge&quot;&gt;conflict&lt;/code&gt;의 해결법을 100% 이해하고 사용하고있는지 의심해봐야 한다.&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;branch를-따서-개발하는-습관&quot;&gt;branch를 따서 개발하는 습관&lt;/h2&gt;
&lt;p&gt;지금 회사에서는 아니고 아~주 예전에 git을 사용해본지 얼마 되지 않았을 때.. 작업하다가 &lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;라는걸 발견했다. &lt;code class=&quot;highlighter-rouge&quot;&gt;아.. branch라는건 이런거구나 사용해볼까?&lt;/code&gt;해서 branch를 여러개 만들었던 기억이 있다. 한참 작업을 하다가 branch를 옮겼는데 3~4일간 작업했던 내용이 모두 사라졌다! &lt;del&gt;이때는 commit도 바로바로 안하고 3~4일치를 몰아서 그냥 push했었다&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;지금 회사에서는 가르침에 따라 branch를 사용하고 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;가르침에 따라 100% 잘 활용하고있는지는 모르겠다 ㅠㅠ 배울게 많은듯&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2019-06-21/Github-branch-종류/&quot;&gt;git branch 명명규칙&lt;/a&gt;&lt;br /&gt;
이런 명명규칙이 있는지도 몰랐는데.. 요즘 사소한거부터 배우는게 많은 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;stash-사용하기&quot;&gt;stash 사용하기&lt;/h2&gt;
&lt;p&gt;git을 사용하다보면 작업하던 내용을 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;하지 않고 branch를 이동하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit을 먼저 하시오!!&lt;/code&gt;와 같은 오류가 발생한다. 이러한 경우에 &lt;code class=&quot;highlighter-rouge&quot;&gt;stash&lt;/code&gt;를 사용했다. 정확히 이러한 경우에 사용하는게 stash인지는 모르겠다..&lt;/p&gt;

&lt;p&gt;문서에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;작업하던 내용을 임시로 저장해두고 HEAD상태로 돌아가는 방법&lt;/code&gt;이라고 적혀있다. 내가 사용했던 기능과 비슷한 느낌인 것 같다.&lt;/p&gt;

&lt;p&gt;나는 아직 &lt;code class=&quot;highlighter-rouge&quot;&gt;git stash&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;git stash pop&lt;/code&gt;정도로 하나 넣고, 최신껄 가져오는 정도만 사용하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;git stash list&lt;/code&gt;에서 여러개의 stash를 관리하는 방법도 있다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;좀 더 공부해야할 영역&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-push--f&quot;&gt;git push -f&lt;/h2&gt;
&lt;p&gt;push가 안될때… 상황을 예를들면 &lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt;를 해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;을 합치거나 순서조정 등을 했을 경우.. &lt;code class=&quot;highlighter-rouge&quot;&gt;git push -f&lt;/code&gt; 를 사용하곤 했다.&lt;/p&gt;

&lt;p&gt;하지만 여러 블로그들을 보았을 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt;는 다른 개발자의 로컬을 망가뜨리는 행위라고 했다.
다른사람과의 충돌상황에서 나의 소스를 강제로 밀어 올리기 때문.. 이런걸 ‘막’ 하다보면 다른개발자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;작업한 소스가 없어졌어요!!&lt;/code&gt; 라는 말이 들리기도 한다.&lt;/p&gt;

&lt;p&gt;반드시 push하기 전에 commit을 합치거나 순서를 바꾸거나 하는 행동이 필요하다면 local해서 충분히 고민 후 push하는 습관을 가져야한다.&lt;/p&gt;

&lt;h2 id=&quot;정리하며&quot;&gt;정리하며..&lt;/h2&gt;
&lt;p&gt;회사에 다른 개발자분이 git 책을 가지고 있는것을 보았다. 두께가 만만치 않다.&lt;br /&gt;
알면 알수록 어려운 git. 잘 사용하면 너무나 편리한 개발을 위한 협업 툴이라 생각된다. 기본적인 기능들은 잘 활용하는 수준이 되면 더 공부해보고싶은 분야.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Aug 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-08-02/git-%EC%82%AC%EC%9A%A9%EA%B8%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-08-02/git-%EC%82%AC%EC%9A%A9%EA%B8%B0/</guid>
      </item>
    
      <item>
        <title>Javascript 정규 표현식 사용하기</title>
        <description>&lt;h2 id=&quot;정규-표현식&quot;&gt;정규 표현식&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;문자열에 나타나는 특정 문자 조합과 대응시키기 위해 사용하는 패턴. 이 패턴들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;RegExp&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;exec메소드, &lt;/code&gt;search메소드, &lt;code class=&quot;highlighter-rouge&quot;&gt;split&lt;/code&gt;메소드와 함께 사용된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정규 표현식은 줄여서 &lt;code class=&quot;highlighter-rouge&quot;&gt;정규식&lt;/code&gt;이라고 부른다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정규식-만들기&quot;&gt;정규식 만들기&lt;/h2&gt;
&lt;p&gt;정규식 만들기에는 두 가지 방법이 있다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;정규식 리터럴(슬러쉬 &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;로 감싸는 방법)을 사용하는 방법
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const re = /ab+c/;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;리터럴로 사용하면 스크립트가 불러와질 때 컴파일이 된다. 정규식이 상수로 이루어져 있다면 리터럴 방식이 성능향상에 도움이 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RegExp&lt;/code&gt;객체의 생성자 함수를 호출하는 방법
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const regexp = new RegExp('ab+c');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;생성자 함수를 사용하면 함수가 실행될 때 컴파일이 된다. 패턴이 변경되는 경우가 있거나 사용자의 입력을 받아 패턴처리하는 경우에는 생성자 함수를 사용한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;정규식-패턴작성하기&quot;&gt;정규식 패턴작성하기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/abc/&lt;/code&gt; 와 같이 단순히 사용할 수 있지만, 좀 더 복잡한 특수 문자 사용하는 방법에 대해 정리해본다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Character&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; \ &lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;역슬러시 뒤에 오는 문자는 특별함을 의미한다.&lt;br /&gt;&lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/a*/&lt;/code&gt; 은 a라는 문자가 0개이상 나타남을 의미하지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;/a\*&lt;/code&gt; 이라 표현하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;a*&lt;/code&gt; 문자 그대로를 해석한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;시작 부분에 대응한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;^A&lt;/code&gt;라 함은 A로 시작하는 문자를 표현한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;끝 부분과 대응한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt;와 반대이다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;플래그&quot;&gt;플래그&lt;/h2&gt;
&lt;p&gt;플래그를 설정해줄 수 있으며 순서에는 구분이 없다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Flag&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;전역 검색&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;대소문자 구분 없음&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;정규식-테스트해볼-수-있는-사이트&quot;&gt;정규식 테스트해볼 수 있는 사이트&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://regexr.com/&quot;&gt;https://regexr.com/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;References
    &lt;ol&gt;
      &lt;li&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D&lt;/li&gt;
      &lt;li&gt;https://code.tutsplus.com/tutorials/8-regular-expressions-you-should-know–net-6149&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 25 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-07-25/javascript-%EC%A0%95%EA%B7%9C%EC%8B%9D/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-07-25/javascript-%EC%A0%95%EA%B7%9C%EC%8B%9D/</guid>
      </item>
    
      <item>
        <title>REST-API 설계하기</title>
        <description>&lt;h2 id=&quot;rest&quot;&gt;REST&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Representational State Transfer&lt;/code&gt;의 약자로 월드 와이드 웹(www)의 기술과 HTTP프로토콜을 그대로 활용하여 웹의 장점을 최대한 활용할 수 있는 아키텍처 기술이다.&lt;/li&gt;
  &lt;li&gt;HTTP URI&lt;code class=&quot;highlighter-rouge&quot;&gt;(Uniform Resource Identifier)&lt;/code&gt;를 통해 자원을 명시하고, HTTP 메소드를 통해 해당 자원을 CRUD하는것을 의미한다.&lt;/li&gt;
  &lt;li&gt;공식적으로 표준화된 표준규약이 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rest-api&quot;&gt;REST API&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;위 설명한 &lt;code class=&quot;highlighter-rouge&quot;&gt;REST&lt;/code&gt;기반으로 서비스의 API를 제공하는 것.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rest-api-설계-규칙&quot;&gt;REST API 설계 규칙&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;URI만으로 어떤 정보를 제공할 것인지 명확해야 한다.
    &lt;ul&gt;
      &lt;li&gt;동사를 사용하지 않는다. 명사를 사용하며 이 때에도 &lt;strong&gt;단수명사&lt;/strong&gt;를 사용한다.&lt;/li&gt;
      &lt;li&gt;ex) GET : /user/1 (ok)&lt;/li&gt;
      &lt;li&gt;ex) GET : /users/1 (err)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP행위에 맞게 사용한다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;약어&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;C&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;R&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;U&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;D&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;Create&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;Read&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;Update&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;Delete&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;의미&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;생성&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;조회&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;수정&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;삭제&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;HTTP&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;post&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;get&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;put&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;delete&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;URI에 HTTP Method가 들어가지 않는다.
    &lt;ul&gt;
      &lt;li&gt;ex) GET : /user/1 (ok)&lt;/li&gt;
      &lt;li&gt;ex) GET : /user/get/1 (err)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;최대한 사용을 자제해야하지만 불가피하게 단어가 길어질 경우 - 하이픈을 사용한다.&lt;/li&gt;
  &lt;li&gt;HTTP response CODE는 HTTP문서를 따른다.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/HTTP_%EC%83%81%ED%83%9C_%EC%BD%94%EB%93%9C&quot;&gt;HTTP 상태코드 확인&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;restful&quot;&gt;RESTful&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;REST에서 설명하였듯이 공식적으로 표준화된 규약이 없다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;REST API&lt;/code&gt;를 제공하는 서비스를 RESTful하다고 부른다. (필자마다 개념이 조금씩 다를 수 있다.)&lt;/li&gt;
  &lt;li&gt;이해하기 쉬운 REST API를 설계하는것에 목적이 있다.&lt;/li&gt;
  &lt;li&gt;RESTful한 API는 성능향상의 목적이 아니기 때문에 최대한 일관성있고 명확하게 설계해야한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;References
    &lt;ol&gt;
      &lt;li&gt;https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html&lt;/li&gt;
      &lt;li&gt;https://bcho.tistory.com/954&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 19 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-07-19/restful-api/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-07-19/restful-api/</guid>
      </item>
    
      <item>
        <title>Git branch 병합하기</title>
        <description>&lt;h2 id=&quot;github-merge와-rebase-이해하기&quot;&gt;Github merge와 rebase 이해하기&lt;/h2&gt;
&lt;p&gt;Github를 사용하다보면 branch를 생성하고 add, commit, merge, rebase, push.. 뭔가 할일이 많다.&lt;br /&gt;
공부해야할게 많다. 그 중 병합에 대해 오늘은 끄적여보고자 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt; 둘 다 2개의 branch를 병합하는 방법이다. 뭐가 다를까?&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;merge&quot;&gt;Merge&lt;/h2&gt;
&lt;p&gt;간단한 그림으로 알아보고자 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;그림처럼 commit 상태가 있다고 가정해본다.&lt;br /&gt;
이 상태에서 master에서 새로운 feature branch를 생성하여 추가로 작업을 하였다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git checkout -b feature/sample
$git commit -m &quot;commit a&quot;
$git commit -m &quot;commit b&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그러면 현재의 git object의 상태는 그림과 같다.&lt;br /&gt;
&lt;img src=&quot;/images/post_6/merge_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;그런데 Master branch에 문제가 생겼다. Hotfix를 해야하는 상황이 생긴것이다.
그래서 그림과 같이 새로운 branch를 생성하여 작업하고 Master와 다시 병합하였다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git checkout master
$git checkout -b hotfix/typo-err
$git commit -m &quot;hotfix&quot;
$git checkout master
$git merge hotfix/typo-err
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/images/post_6/merge_2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그럼 위와같이 HEAD가 이동하였고, cli에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;fast-worward&lt;/code&gt;라는 내용을 확인할 수 있다.&lt;br /&gt;
빨리감기 라고도 하며 branch의 head가 이동했다는것을 의미한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;이 상태에서 이제 개발이 완료된 feature/sample branch를 master와 병합하고자 한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git checkout master
$git merge sample-branch 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/images/post_6/merge_3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위와같이 merge를 하게되면 새로운 커밋이 생성되며 갈래가 나갔다가 다시 합쳐지는 형태로 생성되며
새로운 commit이 자동으로 생성된다. (위 그림에서 xxx 커밋)
이러한 형태를 &lt;code class=&quot;highlighter-rouge&quot;&gt;3-way Merge&lt;/code&gt;라고 부른다.&lt;/p&gt;

&lt;h2 id=&quot;rebase&quot;&gt;Rebase&lt;/h2&gt;
&lt;p&gt;간단한 그림으로 알아보고자 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Merge와 동일하게 commit 상태가 있다고 가정해본다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git checkout -b feature/sample
$git commit -m &quot;commit a&quot;
$git commit -m &quot;commit b&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/images/post_6/rebase_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;이번에도 Master branch에 문제가 생겨서 hotfix를 하였다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git checkout master
$git checkout -b hotfix/typo-err
$git commit -m &quot;hotfix&quot;
$git rebase master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/images/post_6/rebase_2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;이 상태에서 이제 개발이 완료된 feature/sample branch를 master와 병합(이번엔 rebase)하고자 한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git rebase master 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/images/post_6/rebase_3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;feature/sample&lt;/code&gt;의 branch꼬리를 master에 가져다 붙였다. 이제 master에서 merge를 하면
깔끔하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;fast-forward&lt;/code&gt;가 이루어 진다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_6/rebase_4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;
&lt;p&gt;merge보다 rebase가 이력관리가 더 깔끔하다. (가지가 나갔다가 들어갔다가 하지않기 때문에).
때문에 실무에서는 rebase가 대부분 사용하고 있는데, 어떤 차이가 있는지 왜 rebase를 쓰는지
조금이나마 이 글을 정리하면서 이해가 되었다.&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;References
    &lt;ol&gt;
      &lt;li&gt;https://cyberx.tistory.com/96&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 02 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-07-02/Github-merge-rebase/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-07-02/Github-merge-rebase/</guid>
      </item>
    
      <item>
        <title>Git branch 종류와 명명규칙</title>
        <description>&lt;h2 id=&quot;github-branch-종류&quot;&gt;Github branch 종류&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Master&lt;/code&gt;
&lt;strong&gt;배포 Release(Prod) 버전의 소스가 들어있는 branch&lt;/strong&gt;
기본적으로 github 저장소를 생성하면 있는 branch이다. 배포이력을 관리하기 위한 용도로 사용한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Develop&lt;/code&gt;
&lt;strong&gt;개발버전의 소스가 들어있는 branch&lt;/strong&gt;
일반적으로 Master branch에 병합하기 전 최종 개발버전의 소스가 들어있다.
다음 Release될 버전의 소스라고 생각하면 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Feature&lt;/code&gt;
&lt;strong&gt;기능을 개발중인 branch&lt;/strong&gt;
개발자들이 기능개발을 위하여 생성/이용 하는 branch이다. 개발이 완료되면 develop와 병합하여 다른 사람들과 공유한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Hotfix&lt;/code&gt;
&lt;strong&gt;Master branch의 오류사항을 수정하는 branch&lt;/strong&gt;
Feature &amp;gt; Develop &amp;gt; Master의 병합순이 아니라 Master에서 급하게 수정해야하는 경우에 사용한다.
Master에서 직접 branch를 분기하여 생성하며 수정 후 Develop가 아닌 Master에 병합하여 배포한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 21 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-06-21/Github-branch-%EC%A2%85%EB%A5%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-06-21/Github-branch-%EC%A2%85%EB%A5%98/</guid>
      </item>
    
      <item>
        <title>[Vue.js] URL뒤에 붙는 #</title>
        <description>&lt;h2 id=&quot;srcrouterindexjs&quot;&gt;src/router/index.js&lt;/h2&gt;
&lt;p&gt;위 파일을 열어보면 아래 소스를 확인할 수 있다. (구조에 따라 다를 수 있음)&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'HelloWorld'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vue.js는 mode설정을 하지않으면 기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;모드로 동작한다.
(이 경우 ‘http://example.com/#/’ 과 같이 URL 뒤에 #이 붙는다.)&lt;/p&gt;

&lt;p&gt;이 mode를 &lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt;로 바꿔주면 URL뒤에 #이 사라진 모습을 볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'history'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'HelloWorld'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mode-hash-vs-history-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mode&lt;/code&gt; hash vs history ?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;hash&lt;/strong&gt;
모든 url을 hash형태로 서비스한다. URL이 변경될 때 페이지가 다시 로드 되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;history&lt;/strong&gt;
페이지를 다시 로드하지 않고 URL을 탐색할 수 있다.
SPA의 단일 페이지 클라이언트앱이기 때문에 사용자가 직접 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://example.com/user/id&lt;/code&gt; 에 접속하면 404오류가 발생한다.&lt;/p&gt;

&lt;h2 id=&quot;history모드에서-404오류-해결방법&quot;&gt;history모드에서 404오류 해결방법&lt;/h2&gt;
&lt;p&gt;URL접속 시 동일한 index.html 페이지를 제공해야 한다. nginx 설정으로 변경 가능.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/index.html&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;References
    &lt;ol&gt;
      &lt;li&gt;https://router.vuejs.org/kr/guide/essentials/history-mode.html#%EC%84%9C%EB%B2%84-%EC%84%A4%EC%A0%95-%EC%98%88%EC%A0%9C&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 14 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-06-14/Vue-URL/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-06-14/Vue-URL/</guid>
      </item>
    
      <item>
        <title>코드리뷰에서 사용하는 용어들</title>
        <description>&lt;h4 id=&quot;코드리뷰를-받게되면-혹은-다른사람의-코드리뷰를-보다보면-알-수-없는-용어들이-많다그래서-정리해보았다&quot;&gt;코드리뷰를 받게되면 혹은 다른사람의 코드리뷰를 보다보면 알 수 없는 용어들이 많다.&lt;br /&gt;그래서 정리해보았다.&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LGTM&lt;/code&gt; (Looks Good To Me) : 나에게 좋아 보인다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PTAL&lt;/code&gt; (Please Talk Another Look) : 누군가 저에게 말좀 해주세요.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SGTM&lt;/code&gt; (Sounds Good To Me) : 나에게 좋아 보인다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IMHO&lt;/code&gt; : 나의 의견에는..&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BTW&lt;/code&gt; (By The Way)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 13 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-06-13/%EC%BD%94%EB%93%9C%EB%A6%AC%EB%B7%B0-%EC%9A%A9%EC%96%B4%EB%93%A4/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-06-13/%EC%BD%94%EB%93%9C%EB%A6%AC%EB%B7%B0-%EC%9A%A9%EC%96%B4%EB%93%A4/</guid>
      </item>
    
      <item>
        <title>[Vue.js] Mixins 사용하기</title>
        <description>&lt;h2 id=&quot;믹스인&quot;&gt;믹스인&lt;/h2&gt;
&lt;p&gt;Mixins는 Vue 컴포넌트에 재사용 가능을 배포하는 유연한 방법입니다. mixin 객체는 모든 구성요소 옵션을 포함할 수 있습니다. 컴포넌트에 mixin을 사용하면 해당 mixin의 모든 옵션이 컴토넌트의 고유 옵션에 “혼합”됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// mixin 객체 생성&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myMixin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello from mixin!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// mixin을 사용할 컴포넌트 정의&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mixins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &quot;hello from mixin!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;References
    &lt;ol&gt;
      &lt;li&gt;https://kr.vuejs.org/v2/guide/mixins.html&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 11 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-06-11/Vue-Mixins/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-06-11/Vue-Mixins/</guid>
      </item>
    
      <item>
        <title>JWT Token 사용하기</title>
        <description>&lt;h2 id=&quot;jwt-json-web-token&quot;&gt;JWT (JSON Web Token)&lt;/h2&gt;
&lt;p&gt;JSON Web Token (JWT)는 웹표준으로 두 개체에서 JSON 객체를 사용하여 안정성 있게 통신하는것을 지원한다.&lt;/p&gt;

&lt;p&gt;거의 대부분의 언어 (Java, C, Python, C++, PHP, JavaScript-node, Go, Swift, Ruby 등)에서 JWT를 지원하고 있다.&lt;/p&gt;

&lt;h2 id=&quot;사용처&quot;&gt;사용처&lt;/h2&gt;
&lt;p&gt;가장 많이 사용되는 상황으로는&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;회원인증 : 사용자가 로그인을하면 서버는 유저의 정보를 JWT를 기반한 토큰을 발행하여 서버는 클라이언트에게 전달하고 그 데이터를 사용하여 정상회원임을 인증한다.
사용자가 어떠한 작업을 요청할 때마다 JWT토큰이 유효한지 만료가 되지 않았는지 권한이 있는지 등을 체크한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;외부 매체와의 통신 : A서버에서 B서버와 통신하기 위하여 JWT를 사용한다. 두 개체 사이에 안정성있고 보안을 유지하기 위하여 A서버는 통신할 데이터를 JWT형태로 만들어 B서버로 전달한다. 이를 통해 데이터가 중간에 바뀌지 않았는지, 유효한 데이터인지 등의 검증이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;jwt-너는-어떻게-생겼니&quot;&gt;JWT 너는 어떻게 생겼니&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AAAAA.BBBB.CCCC&lt;/code&gt;
위와같이 JWT는 ‘.’(dot)을 기준으로 Header, Payload, Signature 3개로 분리된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Header
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;alg&quot;: &quot;HS256&quot;,
  &quot;typ&quot;: &quot;JWT&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;헤더는 암호화 방식과 어떤 타입인지를 명시해준다. HMAC SHA256혹은 RSA등이 주로 사용된다.
이곳에 명시된 알고리즘을 이용하여 추후 signature를 생성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Payload
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;user_id&quot;: 1,
  &quot;age&quot;: 26,
  &quot;name&quot;: &quot;홍길동&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Payload에는 실제 통신할 데이터가 들어간다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Signature
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HMACSHA256(
base64UrlEncode(header) + '.' +
base64UrlEncode(payload),
secret)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Header를 Base64인코딩 + ‘.’ + Payload를 Base64인코딩 한 후 secret_key를 이용하여 HMAC SHA256으로 암호화해준다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 각각 생성된 Header + ‘.’ + Payload + ‘.’ + Signature를 이어주면 JWT 완성&lt;/p&gt;

&lt;h2 id=&quot;node를-이용한-jwt-만들기&quot;&gt;Node를 이용한 JWT 만들기&lt;/h2&gt;
&lt;p&gt;Payload&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encodedPayload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'base64'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와같이 간단히 생성이 가능한다. (Header, Payload) 이 정보를 이용하여 Signature까지
Signature생성 시 필요한 HMACSHA256은 node기본 내장모듈인 &lt;code class=&quot;highlighter-rouge&quot;&gt;crypto&lt;/code&gt;안에 함수가 있다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;crypto.createHmac&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;그런데 위와같이 구현하다보면 작업이 너무 많다.
그래서 친절한 어떤 친절한 개발자분께서 오픈소스로 제공했다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;jsonwebtoken&lt;/code&gt; (url은 아래 참고에 첨부)&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;References
    &lt;ol&gt;
      &lt;li&gt;https://jwt.io/&lt;/li&gt;
      &lt;li&gt;https://www.npmjs.com/package/jsonwebtoken&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 11 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-06-11/JWT/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-06-11/JWT/</guid>
      </item>
    
      <item>
        <title>CDN 그건 왜 쓰는걸까?</title>
        <description>&lt;h4 id=&quot;cdn이란&quot;&gt;CDN이란?&lt;/h4&gt;
&lt;p&gt;CDN (Content Delivery Network)의 약자로 전 세계에서 분산되어있는 서버 네트워크를 말합니다. CDN은 사용자가 리소스를 다운할 수 있는 서버를 세계 각 지역에 퍼져있기 때문에 지연시간 감소로 인해 빠르게 컨텐츠의 요청/응답을 받을 수 있고, 다운로드를 제공함으로서 사용자에게 더 빠른 서비스를 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;출처 : &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%BD%98%ED%85%90%EC%B8%A0_%EC%A0%84%EC%86%A1_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC&quot;&gt;위키 요약&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;만약 유럽에 있는 국가가 한국서버를 이용할 경우 물리적인 거리로 인해 요청/응답 속도가 늦어질 수 밖에 없습니다.
이런 경우 유럽 요청자의 근처의 위치의 CDN 서버에 복사하여 유럽사용자에게 더 빠른 연결, 속도를 보장할 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;gslb-global-server-load-balance&quot;&gt;GSLB (Global server Load Balance)&lt;/h4&gt;
&lt;p&gt;사용자에게 컨텐츠요청이 있는 경우 가장 최적의(가장 근접의 혹은 트래픽여유가 많은) 서버환경을 찾아주는 역할을 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;DNS와 GSLB의 차이점&lt;/strong&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;DNS&lt;/strong&gt;&lt;br /&gt;
– 서버의 상태를 알 수 없기 때문에 서비스가 정상/중단 여부를 모른다.&lt;br /&gt;
– Round Robin을 이용한 로드밸런싱으로 지역과 떨어진 지역의 서버와도 네트워크를 연결한다.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;GSLB&lt;/strong&gt;&lt;br /&gt;
– 서버의 상태를 알 수 있어서 정상으로 작동하는 서버를 찾아낸다. &lt;br /&gt;
– Round Robin방식은 동일하나 서버의 트래픽을 분석하고 근접한 서버를 찾아내어 부하를 분산시켜준다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;cdn의-캐싱방식&quot;&gt;CDN의 캐싱방식&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Static Caching
    &lt;ul&gt;
      &lt;li&gt;origin서버의 리소스를 CDN서버에 미리 복사해놓는 방식.&lt;/li&gt;
      &lt;li&gt;사용자가 요청 시 무조건 CDN서버에서 리소스를 가져온다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dynamic Caching
    &lt;ul&gt;
      &lt;li&gt;사용자가 리소스 요청 시 CDN서버를 조회한 후 리소스가 없다면 origin서버에서 가져오고 CDN서버에 리소스를 복사해둔다. (Contents Sync)&lt;/li&gt;
      &lt;li&gt;일정시간(TTL)이 지나도 사용이 없으면 CDN서버의 리소스를 삭제한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;References
    &lt;ol&gt;
      &lt;li&gt;https://goddaehee.tistory.com/173&lt;/li&gt;
      &lt;li&gt;https://cloud.google.com/cdn/docs/overview?hl=ko&lt;/li&gt;
      &lt;li&gt;https://cloud.google.com/load-balancing/?hl=ko&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 06 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-06-06/CDN-%EA%B7%B8%EA%B1%B4-%EC%99%9C-%EC%93%B0%EB%8A%94%EA%B1%B8%EA%B9%8C/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-06-06/CDN-%EA%B7%B8%EA%B1%B4-%EC%99%9C-%EC%93%B0%EB%8A%94%EA%B1%B8%EA%B9%8C/</guid>
      </item>
    
      <item>
        <title>늅뉴비의 GCP 컨퍼런스 기웃거리기</title>
        <description>&lt;p&gt;본 글은 2019년 6월 4일(수) 10:00~17:00 진행한 구글 클라우드 온보드 행사에 대해 기록한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_5/img_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;클라우드의-장점&quot;&gt;클라우드의 장점&lt;/h2&gt;
&lt;p&gt;기존에 우리는 웹서비스를 하기위하여 용산(혹은 어딘가)에가서 서버장비를 구매했다.
그리고 보안을 위해 IDS, IPS등을 구매하고 서비스툴을 설치했다.&lt;/p&gt;

&lt;p&gt;사용자가 많아지자 다시 용산에가서 서버를 구매한다. 혹은 생각보다 사용자가 없어서 서버장비가 처치곤란이 되었다.&lt;/p&gt;

&lt;p&gt;어느날 천재지변으로인해 서버에 장애가 생겨 일주일간 서비스를 못하게 되어 사업손실이 생겨버렸다.&lt;/p&gt;

&lt;p&gt;위와같은 상황이 과거라면 현재는 클라우드 서비스를 이용하여 서버구매-보안-툴설치 까지 걸리는 시간을 단 몇 분으로 단축하게 되었다. 또한 과거와 달리 보안에 신경을 덜 써도되고 서버다운에 대한 걱정이 없어졌다.&lt;/p&gt;

&lt;h2 id=&quot;why-google-cloud-&quot;&gt;Why Google Cloud ?&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;20여년간 축적된 기술 노하우&lt;/li&gt;
  &lt;li&gt;전세계 가장 많은 사용자를 가진 서비스 (10억명이상의 활성 사용자)&lt;/li&gt;
  &lt;li&gt;Korea를 위한 다양한 지원 (한국어 상담, 지속적인 API 문서번역 등)&lt;/li&gt;
  &lt;li&gt;강력한 보안&lt;/li&gt;
  &lt;li&gt;강력한 인프라, 스토리지, 네트워크&lt;/li&gt;
  &lt;li&gt;초단위 사용분 결제&lt;/li&gt;
  &lt;li&gt;지속사용자에 대한 할인플랜&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;titan&quot;&gt;Titan&lt;/h2&gt;
&lt;p&gt;구글의 모든 클라우드 서버장비에는 구글이 자체 개발한 Titan칩이 들어갑니다.
이 칩은 하드웨어를 가로채 악성코드가 담긴 펌웨어주입을 사전에 방지한다.&lt;/p&gt;

&lt;p&gt;타이탄칩은 서버부팅 시 공개키암호화를 이용하여 메모리에서 읽어온 부팅데이터가 조작되지 않았는지 검사 후 부트로더를 실행한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_5/img_chip.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;해저케이블&quot;&gt;해저케이블&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Google은 위성이 아닌 해저케이블을 이용해 최대 초당 60Tbps (테라비트)의 속도를 보장하다.&lt;/li&gt;
  &lt;li&gt;해저케이블은 수심 8Km아래에 있다.&lt;/li&gt;
  &lt;li&gt;전송 속도는 최대 80Tbps이며 이는 2,100개의 DVD를 1초만에 전송가능할 수 있는 속도이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_5/img_cable.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;/images/post_5/img_cable2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;모듈소개&quot;&gt;모듈소개&lt;/h2&gt;
&lt;h4 id=&quot;iam---권한관리&quot;&gt;IAM - 권한관리&lt;/h4&gt;
&lt;p&gt;Org - (example.com)&lt;br /&gt;
｜&lt;br /&gt;
Folders - (Folers.. 다중구조 가능)&lt;br /&gt;
｜&lt;br /&gt;
Projects - (프로젝트)  &lt;br /&gt;
｜&lt;br /&gt;
Resources - (인력)&lt;/p&gt;

&lt;p&gt;위와같은 구조로 IAM설정이 가능하며 각 속성마다 읽기/쓰기를 별도로 설정할 수 있다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;덜 제한적인 상위 정책이 더 제한적인 리소스 정책에 상속됨&lt;br /&gt;
(간단히 말하면 아래속성에 읽기/쓰기 가 있더라도 더 상위속성이 읽기권한 뿐이라면 상위권한에 따른다.)&lt;/li&gt;
  &lt;li&gt;Cloud Identity 하나로 GCP권한과 G Suite 권한관리가 동시에 가능하다.&lt;/li&gt;
  &lt;li&gt;구글에서 사전에 정의해둔 역할기반으로 사용자에게 권한을 부여할 수 있다. (커스텀 권한설정도 가능)&lt;/li&gt;
  &lt;li&gt;모든 사용자에게 모든 권한을 열어주기 보다는 최소 권한의 원칙을 적용하여 필요한 사람에게 필요한 권한만을 줄 것을 권장한다.&lt;/li&gt;
  &lt;li&gt;IAM으로 보여된 권한을 가진 사용자가 행동하는 모든 기록은 감사 로그를 통해 확인이 가능하다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;google-cloud-platform-console&quot;&gt;Google Cloud Platform Console&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;구글은 콘솔환경을 지원한다.&lt;/li&gt;
  &lt;li&gt;웹에 자체개발한 콘솔화면을 띄울 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;gcp-marketplace&quot;&gt;GCP Marketplace&lt;/h4&gt;
&lt;p&gt;Marketplace에 접근해보면 다른사용자들 혹은 구글에서 만든 서버환경 세팅이 있다.
필요한것을 찾아 클릭. 설치하면 바로 필요한 환경이 바로 세팅된다.
예를들어 Node + Express + Vue.js로 구성된 프로젝트가 있는 서버환경
*일부 솔루션은 타사 라이선스 요금도 함께 부과되니 주의해야한다.&lt;/p&gt;

&lt;h4 id=&quot;virtual-private-cloud-네트워크&quot;&gt;Virtual Private Cloud 네트워크&lt;/h4&gt;
&lt;p&gt;구글은 해저케이블을 통해 전세계 네트워크망을 가지고 있다. 모든 서버리소스는 공인IP와 별도로 내부IP를 가지고 있다. &lt;br /&gt;
아시아에 있는 A서버에서 미국에 있는 B서버로 통신을 할 경우 라우터를 30개 가량 통과해야 하지만, 구글의 내부IP를 이용하면 라우터 1번만으로 찾아갈 수 있다. &lt;br /&gt;
(미국, 아시아 각각 서버가 본인 소유이고 2개에서 통신이 필요한 경우 속도에서 이득이 있을 듯)&lt;/p&gt;

&lt;h4 id=&quot;cloud-global-load-balancing-https-tcp-udp-ssl&quot;&gt;Cloud Global Load Balancing: HTTP(S), TCP, UDP, SSL&lt;/h4&gt;
&lt;p&gt;hot ptato라고 불리는 개념을 해결한 모듈. 라우터는 목적지 IP를 받은 후 최적의 경로와 최고의 속도(Health check)를 내주는 라우터에게 트래픽을 전달한다.&lt;/p&gt;

&lt;h4 id=&quot;compute-engine-고성능-가상머신&quot;&gt;Compute Engine 고성능 가상머신&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;안정적인 성능, 빠른부팅&lt;/li&gt;
  &lt;li&gt;다운타임없이 Disk 용량조절&lt;/li&gt;
  &lt;li&gt;Auto-scaling 지원&lt;/li&gt;
  &lt;li&gt;수평으로 확장 가능한 인스턴스 (CPU 등)&lt;/li&gt;
  &lt;li&gt;지속사용 할인&lt;/li&gt;
  &lt;li&gt;선점형 VM (VM을 한번에 묶어서 몇천대까지 사용 가능) 80%할인 (단 더 중요한 업체가 온다면 양보하는 조건으로 80%할인 해준다고함)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;cloud-sql&quot;&gt;Cloud SQL&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;관리형 RDBMS&lt;/li&gt;
  &lt;li&gt;자동복제&lt;/li&gt;
  &lt;li&gt;자동백업&lt;/li&gt;
  &lt;li&gt;수직 확장 및 수평확장&lt;/li&gt;
  &lt;li&gt;강력한 보안적용&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;cloud-spanner&quot;&gt;Cloud Spanner&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;관리형 RDBMS&lt;/li&gt;
  &lt;li&gt;자동복제&lt;/li&gt;
  &lt;li&gt;강력한 전역 일관성 (DDB 10개를 사용할 경우 1곳에 데이터가 바뀌면 실시간으로 10곳에 모두 적용)&lt;/li&gt;
  &lt;li&gt;가용성이 우수한 인스턴스&lt;/li&gt;
  &lt;li&gt;SQL(ANSI 2011, 확장포함) - 거의 대부분의 SQL문을 그대로 사용가능&lt;/li&gt;
  &lt;li&gt;PTbyte 정도 사용할 경우에 추천&lt;/li&gt;
  &lt;li&gt;Spanner을 여러개 붙여서 사용가능. 30개의 Spanner연결 시 초당 약 23,000건의 쿼리실행 가능&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;cloud-bigtable&quot;&gt;Cloud Bigtable&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;테라바이트 규모의 NoSQL&lt;/li&gt;
  &lt;li&gt;HBaseAPI로 액세스하며 빅데이터, 하둡과 기본적으로 호환된다&lt;/li&gt;
  &lt;li&gt;역할 기반 ACL&lt;/li&gt;
  &lt;li&gt;Google Gmail이 Bigtable을 사용중이라고함&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;cloud-storage&quot;&gt;Cloud Storage&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;페타바이트 규모의 고성능 저장공간&lt;/li&gt;
  &lt;li&gt;단순한 용량관리 (용량을 지정할필요 없이 자동으로 확장/축소 됨)&lt;/li&gt;
  &lt;li&gt;모든 데이터 암호화 저장&lt;/li&gt;
  &lt;li&gt;버킷 이라는 이름으로 저장공관 관리&lt;/li&gt;
  &lt;li&gt;액세스 빈도에 따라 등급설정이 가능하며 백업용 (액세스가 거의 없는 자료)의 경우 할인율이 높다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;K8s 라고도 불리는 컨테이너 서비스&lt;/li&gt;
  &lt;li&gt;컨테이너의 배포, 확장, 운영의 자동화&lt;/li&gt;
  &lt;li&gt;운영체제에 대해 독립적 (일관성있는 환경을 제공)&lt;/li&gt;
  &lt;li&gt;다운타임 없이 애플리케이션의 업데이트가 가능&lt;/li&gt;
  &lt;li&gt;부하분산, 자동확장&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;kubernetes-engine&quot;&gt;Kubernetes Engine&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;컨테이너 관리 및 실행&lt;/li&gt;
  &lt;li&gt;로깅, 상태관리 모니터링&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;google-cloud-container-builder&quot;&gt;Google Cloud Container Builder&lt;/h4&gt;
&lt;p&gt;컨테이너 이미지 생성&lt;/p&gt;

&lt;h4 id=&quot;app-engine&quot;&gt;App Engine&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;소스코드만 집중할 수 있는 서버엔진&lt;/li&gt;
  &lt;li&gt;ServerLess&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;cloud-functions&quot;&gt;Cloud Functions&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;서버없이 함수개발&lt;/li&gt;
  &lt;li&gt;RESTful 지원&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;gcp-vs-aws-모듈-명칭-비교&quot;&gt;GCP vs AWS 모듈 명칭 비교&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Google Cloud Platform&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Amazon Web Service&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IAM&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IAM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;App Engine&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Elastic Beanstalk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Compute Engine&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;EC2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Cloud SQL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;RDS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Cloud Storage&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;S3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Stackdriver&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Cloud Watch&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Cloud Functions&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Lambda&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;명칭비교는 지속적으로 업데이트할 예정. (잘못 적어둔게 있다면 제보해주세요)&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 05 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-06-05/GCP-conference/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-06-05/GCP-conference/</guid>
      </item>
    
      <item>
        <title>[Vue.js Express] 이용한 개발환경 세팅하기</title>
        <description>&lt;h4 id=&quot;express와-vuejs를-이용한-개발환경-세팅하기&quot;&gt;Express와 Vue.js를 이용한 개발환경 세팅하기&lt;/h4&gt;
&lt;p&gt;구글에 검색해보면 위 키워드로 검색하면 무수히 많은 자료가 나온다.
여러 자료를 보고 내 입맛에 딱 맞는 설명을 찾기 어려워 (좀 더 검색하면 있을지도?)
정리도 할 겸 남겨보도록 한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;개념도&quot;&gt;개념도&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/post_4/img_structure.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IE, Chrome등의 브라우저를 통해 Vue.js로 만들어진 웹페이지에 접속하고 Express로 만들어진 서버와 통신한다.
Express는 MySQL, ORACLE등의 데이터베이스와 연결된 형태를 가지고 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;backend-설정&quot;&gt;Backend 설정&lt;/h3&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;npm install express-generator -g
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;express --ejs backend #&lt;/span&gt;express-generator를 이용해 express 프로젝트를 생성한다
&lt;span class=&quot;go&quot;&gt;cd backend
npm install
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;npm start #&lt;/span&gt; 서버 가동
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 순서로 간단하게 Express프레임워크의 Backend구성이 끝났다.&lt;/p&gt;

&lt;h3 id=&quot;frontend-설정&quot;&gt;FrontEnd 설정&lt;/h3&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;npm install -g vue-cli
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;vue init webpack frontend #&lt;/span&gt; frontend 폴더에 vue프로젝트를 생성한다
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; 여러가지 설정하는것이 나오는데 vue-router, eslint 등 필요한것을 Y로 설정.
&lt;span class=&quot;go&quot;&gt;cd front
npm install
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;vue init webpack fronted 실행 시 물어보는 질문&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;? Project name :
? Project description A Vue.js : 
? Author : 
? Vue build standalone :
? Install vue-router? :
? Use ESLint to lint your code? :
? Pick an ESLint preset Standard :
? Set up unit tests : 
? Pick a test runner :
? Setup e2e tests with Nightwatch? :
? Should we run `npm install` for you after the project has been created? (recommended) :
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 순서로 이번에도 간단하게 Vue.js프레임워크의 Frontend구성이 끝났다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;proxytable-설정&quot;&gt;ProxyTable 설정&lt;/h3&gt;
&lt;p&gt;여기까지 따라왔다면 현재 Backend, Frontend의 2개의 폴더가 생겼을 것이다.&lt;br /&gt;
project&lt;br /&gt;
– frontend  &lt;br /&gt;
└ backend&lt;/p&gt;

&lt;p&gt;현재 2개의 폴더는 각각 따로 실행되고 있다.&lt;br /&gt;
port : (frontend : 8080, backend: 3000)&lt;br /&gt;
이 2개를 연결해줘야 한다.&lt;/p&gt;

&lt;p&gt;/frontend/config/index.js 를 열어 편집&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;proxyTable: {
    '/api': {
        target: 'http://localhost:3000/api'
    }
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와같이 설정해주면 frontend에서 :8080/api/.. 와같이 시작하는 url은&lt;br /&gt;
backend의 :3000/api/.. 로 proxy해준다.&lt;/p&gt;

&lt;p&gt;이제 2개의 프로젝트가 정상적으로 연결되었다.&lt;/p&gt;

&lt;p&gt;터미널 2개를 띄워 각각 프로젝트를 실행해준다.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;frontend - npm start - http://localhost:8080  
backend - npm start - http://localhost:3000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;http://localhost:8080 에서 http://localhost:8080/api/..를 실행해보면&lt;br /&gt;
http://localhost:3000/api/.. 에서 반응이 오는것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;너무나 간단한 기본 개발환경 세팅방법.&lt;br /&gt;
&lt;em&gt;참 쉽죠?&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-06-01/Express-Vue-%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%92%E1%85%AA%E1%86%AB%E1%84%80%E1%85%A7%E1%86%BC-%E1%84%89%E1%85%A6%E1%84%90%E1%85%B5%E1%86%BC%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-06-01/Express-Vue-%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%92%E1%85%AA%E1%86%AB%E1%84%80%E1%85%A7%E1%86%BC-%E1%84%89%E1%85%A6%E1%84%90%E1%85%B5%E1%86%BC%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5/</guid>
      </item>
    
      <item>
        <title>ExpressSession 사용해보기</title>
        <description>&lt;h3 id=&quot;expresssession&quot;&gt;ExpressSession&lt;/h3&gt;
&lt;p&gt;ExpressSession은 Express 프레임워크에서 세션관리를 위한 미들웨어입니다.&lt;/p&gt;

&lt;h3 id=&quot;appjs를-편집합니다&quot;&gt;app.js를 편집합니다.&lt;/h3&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express-session'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expressSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RedisStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;resave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;saveUninitialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'!$#%#$%#$#'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;store - 세션을 저장할 장소를 지정한다. 위 예제에서는 redis에 저장한다.&lt;/li&gt;
  &lt;li&gt;파일 / redis / database 등 설정 가능&lt;/li&gt;
  &lt;li&gt;secret - 쿠키의 임의로 변조하는것을 막기 위하여 설정하는 값. 이 값을 통하여 암호화하여 저장한다.&lt;/li&gt;
  &lt;li&gt;resave - 세션을 언제나 저장할지 정하는 값. false권장&lt;/li&gt;
  &lt;li&gt;saveUninitialized - 세션이 저장되기 전에 uninitialized상태로 미리 저장한다.&lt;/li&gt;
  &lt;li&gt;cookie - 쿠키사용여부와 그에대한 속성설정&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 30 May 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-05-30/express-session/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-05-30/express-session/</guid>
      </item>
    
      <item>
        <title>Dont't use Array.forEach()</title>
        <description>&lt;h3 id=&quot;nodejs에서-foreach를-사용하지-마십시오&quot;&gt;Node.js에서 forEach를 사용하지 마십시오.&lt;/h3&gt;
&lt;p&gt;사소하지만 작은 습관이 성능을 더 빨라지게 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;JavaScript에서 Array.forEach는 for()문법에 비해 95% 더 느립니다.&lt;br /&gt;
&lt;strong&gt;Dont’t use :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Use :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;   
    &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Also :&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;   
    &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 코드는 for문을 한 바퀴 돌 때마다 Array.length를 계산하기 때문에 성능이 떨어질 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;참고사이트&quot;&gt;참고사이트&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://coderwall.com/p/kvzbpa/don-t-use-array-foreach-use-for-instead&quot;&gt;원본&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 28 May 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-05-28/Dont-use-foreach/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-05-28/Dont-use-foreach/</guid>
      </item>
    
      <item>
        <title>[ORM] Node.js에서 ORM 사용하기</title>
        <description>&lt;h3 id=&quot;ormobject-relational-mapping-이란&quot;&gt;ORM(Object Relational Mapping) 이란?&lt;/h3&gt;
&lt;p&gt;ORM(Object Relational Model)은 사물을 추상화시켜 이해하려는 OOP적 사고방식과 DataModel을 정형화하여 관리하려는 RDB 사이를 연결할 계층의 역할로 제시된 패러다임으로 RDB의 모델을 OOP에 Entity 형태로 투영시키는 방식을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2/img_orm.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;즉, Object와 Database간에 연결 역할을 해주는녀석이 ORM이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1-orm의-등장배경&quot;&gt;1. ORM의 등장배경&lt;/h4&gt;

&lt;p&gt;ORM을 사용하지 않을 경우 개발자가 개발을 위하여 Database에 접근하기 위해서는 SQL Query문을 직접 만들었다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SQL문법을 알고 있어야하는 문제 (쿼리문 작성시간이 오래걸려 개발이 지체되는 문제가 발생)&lt;/li&gt;
  &lt;li&gt;개발 코드와 Database가 서로 종속된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와같은 문제점들이 생겨나기 시작했다.&lt;br /&gt;
이러한 문제점을 해결하기 위해 ORM이 등장하였고 ORM이 등장함으로서&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SQL Query 문법에서 비교적 자유로워졌으며&lt;/li&gt;
  &lt;li&gt;개발 코드와 Database를 분리함으로써 객체지향의 의도에 부합하게 되었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;2-orm사용의-장점과-단점&quot;&gt;2. ORM사용의 장점과 단점&lt;/h4&gt;

&lt;p&gt;장점&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;개발의 생산성 향상
    &lt;ul&gt;
      &lt;li&gt;선언문, 할당, 종료 등과같은 부수적인 코드가 사라짐으로써 개발의 생산성 향상.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;명확한 쿼리 (버그와 실수 감소)
    &lt;ul&gt;
      &lt;li&gt;코드그 간결하고 직관이기 때문에 가독성을 높여준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DB 의존성 감소
    &lt;ul&gt;
      &lt;li&gt;대부분 ORM 솔루션이 특정 Database에 종속적이지 않다.&lt;br /&gt;
 개발자는 Database에 상관없이 Object에만 집중할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;단점&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;튜닝의 어려움
    &lt;ul&gt;
      &lt;li&gt;미세한 수정 및 디버그하기가 상대적으로 어렵다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;복잡한 쿼리작성의 문제
    &lt;ul&gt;
      &lt;li&gt;ORM이 지정해 놓은 명령만 내릴 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Raw쿼리에 비해 느린 실행속도
    &lt;ul&gt;
      &lt;li&gt;DB에 직접 명령을 내리지 않고 한단계 거쳐가기 때문에&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;3-raw-sql-vs-typeorm-vs-sequelizejs-vs-knex&quot;&gt;3. &lt;code class=&quot;highlighter-rouge&quot;&gt;Raw SQL&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeORM&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;Sequelize.js&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;Knex&lt;/code&gt;&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;문법의 비교&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1. SQL&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT * FROM post WHERE authorId = 12 AND status = 'active'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Knex&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;knex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;authorId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'active'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Sequelize&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;authorId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'active'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// TypeORM&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;authorId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'active'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 2. SQL&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;select * 
               from category_page 
               where category_id = 5
                 and (show_at is null or show_at &amp;gt;= now()) 
                 and (hide_at is null or hide_at &amp;lt;= now())
               order by updated_at desc 
               limit 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
             
&lt;span class=&quot;c1&quot;&gt;// Knex&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;knex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category_page&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;whereNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'show_at'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orWhere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'show_at'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;gt;='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;whereNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hide_at'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orWhere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hide_at'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'updated_at'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'desc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Sequelize&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CategoryPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;category_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;show_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hide_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'updated_at'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DESC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 참고 EQ(&quot;=&quot;), GTE(&quot;&amp;gt;=&quot;), GT(&quot;&amp;gt;&quot;), LT(&quot;&amp;lt;&quot;), LTE(&quot;&amp;lt;=&quot;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// TypeORM&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CategoryPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createQueryBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category_id = :categoryId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;categoryId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;andWhere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(show_at is null or show_at &amp;gt;= now())&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;andWhere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(hide_at is null or hide_at &amp;lt;= now())&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;updated_at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DESC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;함수 실행속도 비교 (10번 실행한 결과의 평균 수치)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;-&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;raw&lt;/code&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;typeORM&lt;/code&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Sequelize.js&lt;/code&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Knex.js&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Query 1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2.19&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8.42&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.86&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Query 2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.51&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.58&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4.02&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.59&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Query 3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.39&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3.92&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9.13&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2.13&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;– Query 1 : 단순 select 쿼리&lt;br /&gt;
– Query 2 : 단순 select 쿼리&lt;br /&gt;
– Query 3 : 단순 구조의 table 2개 join 쿼리&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단위 : (ms)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;실행 Server의 성능에 따라 결과는 달라질 수 있음&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Github&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;-&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;typeORM&lt;/code&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Sequelize.js&lt;/code&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Knex.js&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Stars (git)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;12,541&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;18,379&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9,409&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Language&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TypeScript&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TypeScript&lt;br /&gt;(TS &amp;gt;= 3.1)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JavaScript&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Google (English)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;++&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;+++&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;++&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Google (Korean)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;++&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;+++&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;++&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmtrends.com/sequelize-vs-typeorm-vs-knex&quot;&gt;(NPM trends 로 확인하는 비교자료)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Support Databases&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;TypeORM : &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;MariaDB&lt;/code&gt; / Postgres / CockroachDB / SQLite / Microsoft SQL Server / Oracle / sql.js / MongoDB NoSQL&lt;/li&gt;
  &lt;li&gt;Sequelize : Postgres, &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MariaDB&lt;/code&gt;, SQLite and Microsoft SQL Server.&lt;/li&gt;
  &lt;li&gt;Knex :  PostgreSQL, &lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt; and SQLite3&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;4-그래서-어떤-것을-사용할-것인가&quot;&gt;4. 그래서 어떤 것을 사용할 것인가?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;후보 1&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;TypeORM, Sequelize(only TS &amp;gt;= 3.1 is supported.)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;장점 : TypeScript를 지원, 생산성, 신뢰성을 만족&lt;/li&gt;
  &lt;li&gt;단점 : 실행속도, 튜닝의 어려움, 복잡한 쿼리작성 등의 단점(ORM의 단점)을 가지고 있으나, 이정도로 복잡하게 사용할 것인가? 고민&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;TypeORM, Sequelize의 차이점&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Sequelize에 비해 상대적으로 속도가 빠른 TypeORM&lt;/li&gt;
    &lt;li&gt;TypeORM는 코드작성이 raw쿼리에 좀 더 가까운 모습&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;후보 2&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;인생은 날 쿼리. node-mysql/node-mysql2 only!&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;장점 : 튜닝, 복잡한 쿼리작성의 문제, ORM에 비해 상대적으로 빠른 실행속도 모두를 만족!&lt;/li&gt;
  &lt;li&gt;단점 : 생산성, 신뢰성 은 다소 떨어지는 단점&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;참고사이트&quot;&gt;참고사이트&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.libhunt.com/categories/524-odm-orm&quot;&gt;Node에서 지원하는 다양한 ORM모듈&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.slant.co/topics/11235/~javascript-orms&quot;&gt;6 Best JavaScript ORMs as of 2019&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://typeorm.io/#/&quot;&gt;TypeORM Document&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.sequelizejs.com/manual/querying.html#where&quot;&gt;Sequelize.js Document&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tgriesser/knex&quot;&gt;Knex.js Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 29 Apr 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-04-29/Node%EC%97%90%EC%84%9C-ORM-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-04-29/Node%EC%97%90%EC%84%9C-ORM-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      </item>
    
      <item>
        <title>[GCP] VM Instance Disk Monitoring</title>
        <description>&lt;p&gt;GCP.. 검색해보면 AWS에 비해 많이 부족한 검색자료. 이번에 적용하는 김에 문서로 정리해둔다.
(다음에 또 적용할 필요가 있을 때를 대비하여)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VM Instance 는 생성하였다고 가정한 후 시작합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-instance에-stackdriver-monitoring-설치&quot;&gt;1. Instance에 Stackdriver Monitoring 설치&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/monitoring/agent/install-agent?hl=ko&quot;&gt;GCP Document 문서&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-vm-인스턴스에서-다음-명령어를-실행하여-모니터링-에이전트를-설치합니다&quot;&gt;1. VM 인스턴스에서 다음 명령어를 실행하여 모니터링 에이전트를 설치합니다.&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;curl -sSO https://dl.google.com/cloudagents/install-monitoring-agent.sh
sudo bash install-monitoring-agent.sh
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-vm-인스턴스에서-다음-명령어를-실행하여-monitoring-에이전트를-다시-시작합니다&quot;&gt;2. VM 인스턴스에서 다음 명령어를 실행하여 Monitoring 에이전트를 다시 시작합니다.&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;sudo service stackdriver-agent restart
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-stackdriver에-policy-추가&quot;&gt;2. Stackdriver에 Policy 추가&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/monitoring/alerts/&quot;&gt;GCP Document 문서&lt;/a&gt;
&lt;a href=&quot;https://cloud.google.com/stackdriver/pricing#alert-usage&quot;&gt;정책만들기 GCP 문서&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-policy-create&quot;&gt;1. Policy Create&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Stackdriver &amp;gt; Alerting &amp;gt; Create a Policy&lt;/code&gt; 로 이동
&lt;img src=&quot;/images/post_1/img_1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add Condition 선택&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Target 설정
Resource Type : &lt;code class=&quot;highlighter-rouge&quot;&gt;GCE VM Instance&lt;/code&gt;
Metric : &lt;code class=&quot;highlighter-rouge&quot;&gt;Disk Usage&lt;/code&gt; [디스크 사용량 - 정량(숫자)표시] or
			&lt;code class=&quot;highlighter-rouge&quot;&gt;Disk Utilization&lt;/code&gt; [디스크 사용량 - % 계산]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Filter를 이용하여 원하는 Disk 선택&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configuration 설정 (문서 참고)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Save&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2-notifications-설정&quot;&gt;2. Notifications 설정&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;알림을 받고자 하는 매체 선택
&lt;code class=&quot;highlighter-rouge&quot;&gt;SMS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Slack&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Email&lt;/code&gt; 등&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;3-save-done&quot;&gt;3. Save (done)&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;용량을 채우고 테스트 해보아야 하는데 어떻게? =&amp;gt; &lt;a href=&quot;/2019-04-15/Linux-%E1%84%83%E1%85%A5%E1%84%86%E1%85%B5%E1%84%91%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%AF-%E1%84%86%E1%85%A1%E1%86%AB%E1%84%83%E1%85%B3%E1%86%AF%E1%84%80%E1%85%B5/&quot;&gt;링크&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Apr 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-04-16/GCP-Disk%EC%9A%A9%EB%9F%89-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-04-16/GCP-Disk%EC%9A%A9%EB%9F%89-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81/</guid>
      </item>
    
      <item>
        <title>Linux 더미파일 만들기</title>
        <description>&lt;h2 id=&quot;과제-disk-사용량이-90이상이-넘어가는것을-테스트하기-위해-용량이-큰-파일이-필요하다&quot;&gt;과제. Disk 사용량이 90%이상이 넘어가는것을 테스트하기 위해 용량이 큰 파일이 필요하다.&lt;/h2&gt;

&lt;p&gt;1G 용량을 차지하는 더미파일을 만드는 명령어가 존재한다.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; fallocate &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; 1G test_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 15 Apr 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-04-15/Linux-%EB%8D%94%EB%AF%B8%ED%8C%8C%EC%9D%BC-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-04-15/Linux-%EB%8D%94%EB%AF%B8%ED%8C%8C%EC%9D%BC-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      </item>
    
  </channel>
</rss>
